/* ************** Cross Code Co.Ltd ******************** how to auto convert from C to dart by ffigen packages ***************************************************** */
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Convert Header file of C to dart file of Dart by ffigen package
class AutoConvertByffigen {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AutoConvertByffigen(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AutoConvertByffigen.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int CreateClassInstance(
    ffi.Pointer<HANDLE> ppClassHandle,
  ) {
    return _CreateClassInstance(
      ppClassHandle,
    );
  }

  late final _CreateClassInstancePtr =
      _lookup<ffi.NativeFunction<BOOL Function(ffi.Pointer<HANDLE>)>>(
          'CreateClassInstance');
  late final _CreateClassInstance =
      _CreateClassInstancePtr.asFunction<int Function(ffi.Pointer<HANDLE>)>();

  void DeleteClassInstance(
    HANDLE pClassHandle,
  ) {
    return _DeleteClassInstance(
      pClassHandle,
    );
  }

  late final _DeleteClassInstancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(HANDLE)>>(
          'DeleteClassInstance');
  late final _DeleteClassInstance =
      _DeleteClassInstancePtr.asFunction<void Function(HANDLE)>();

  int GetSizeOfRestrictedAlignmentStruct(
    HANDLE pClassHandle,
    RestrictedAlignmentStruct sStrut,
  ) {
    return _GetSizeOfRestrictedAlignmentStruct(
      pClassHandle,
      sStrut,
    );
  }

  late final _GetSizeOfRestrictedAlignmentStructPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(HANDLE, RestrictedAlignmentStruct)>>(
      'GetSizeOfRestrictedAlignmentStruct');
  late final _GetSizeOfRestrictedAlignmentStruct =
      _GetSizeOfRestrictedAlignmentStructPtr.asFunction<
          int Function(HANDLE, RestrictedAlignmentStruct)>();

  int GetSizeOfUnrestrictedAlignmentStruct(
    HANDLE pClassHandle,
    UnrestrictedAlignmentStruct sStrut,
  ) {
    return _GetSizeOfUnrestrictedAlignmentStruct(
      pClassHandle,
      sStrut,
    );
  }

  late final _GetSizeOfUnrestrictedAlignmentStructPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(HANDLE, UnrestrictedAlignmentStruct)>>(
      'GetSizeOfUnrestrictedAlignmentStruct');
  late final _GetSizeOfUnrestrictedAlignmentStruct =
      _GetSizeOfUnrestrictedAlignmentStructPtr.asFunction<
          int Function(HANDLE, UnrestrictedAlignmentStruct)>();

  int CompareStringOfRestrictedAlignmentStruct(
    HANDLE pClassHandle,
    pRestrictedAlignmentStruct pStruct,
  ) {
    return _CompareStringOfRestrictedAlignmentStruct(
      pClassHandle,
      pStruct,
    );
  }

  late final _CompareStringOfRestrictedAlignmentStructPtr = _lookup<
          ffi.NativeFunction<
              BOOL Function(HANDLE, pRestrictedAlignmentStruct)>>(
      'CompareStringOfRestrictedAlignmentStruct');
  late final _CompareStringOfRestrictedAlignmentStruct =
      _CompareStringOfRestrictedAlignmentStructPtr.asFunction<
          int Function(HANDLE, pRestrictedAlignmentStruct)>();

  int CompareStringOfUnrestrictedAlignmentStruct(
    HANDLE pClassHandle,
    pUnrestrictedAlignmentStruct pStruct,
  ) {
    return _CompareStringOfUnrestrictedAlignmentStruct(
      pClassHandle,
      pStruct,
    );
  }

  late final _CompareStringOfUnrestrictedAlignmentStructPtr = _lookup<
          ffi.NativeFunction<
              BOOL Function(HANDLE, pUnrestrictedAlignmentStruct)>>(
      'CompareStringOfUnrestrictedAlignmentStruct');
  late final _CompareStringOfUnrestrictedAlignmentStruct =
      _CompareStringOfUnrestrictedAlignmentStructPtr.asFunction<
          int Function(HANDLE, pUnrestrictedAlignmentStruct)>();

  int NotifyCallbackOfUnrestrictedAlignmentStruct(
    HANDLE pClassHandle,
    pUnrestrictedAlignmentStruct pStruct,
  ) {
    return _NotifyCallbackOfUnrestrictedAlignmentStruct(
      pClassHandle,
      pStruct,
    );
  }

  late final _NotifyCallbackOfUnrestrictedAlignmentStructPtr = _lookup<
          ffi.NativeFunction<
              BOOL Function(HANDLE, pUnrestrictedAlignmentStruct)>>(
      'NotifyCallbackOfUnrestrictedAlignmentStruct');
  late final _NotifyCallbackOfUnrestrictedAlignmentStruct =
      _NotifyCallbackOfUnrestrictedAlignmentStructPtr.asFunction<
          int Function(HANDLE, pUnrestrictedAlignmentStruct)>();

  int NotifyCallbackOfRestrictedAlignmentStruct(
    HANDLE pClassHandle,
    pRestrictedAlignmentStruct pStruct,
  ) {
    return _NotifyCallbackOfRestrictedAlignmentStruct(
      pClassHandle,
      pStruct,
    );
  }

  late final _NotifyCallbackOfRestrictedAlignmentStructPtr = _lookup<
          ffi.NativeFunction<
              BOOL Function(HANDLE, pRestrictedAlignmentStruct)>>(
      'NotifyCallbackOfRestrictedAlignmentStruct');
  late final _NotifyCallbackOfRestrictedAlignmentStruct =
      _NotifyCallbackOfRestrictedAlignmentStructPtr.asFunction<
          int Function(HANDLE, pRestrictedAlignmentStruct)>();

  int CopyDataOfUnrestrictedAlignmentStructWithCallback(
    HANDLE pClassHandle,
    UnrestrictedAlignmentStruct pStruct,
    CopyStructCallbackFunc pCopyCallbackFunc,
  ) {
    return _CopyDataOfUnrestrictedAlignmentStructWithCallback(
      pClassHandle,
      pStruct,
      pCopyCallbackFunc,
    );
  }

  late final _CopyDataOfUnrestrictedAlignmentStructWithCallbackPtr = _lookup<
          ffi.NativeFunction<
              BOOL Function(HANDLE, UnrestrictedAlignmentStruct,
                  CopyStructCallbackFunc)>>(
      'CopyDataOfUnrestrictedAlignmentStructWithCallback');
  late final _CopyDataOfUnrestrictedAlignmentStructWithCallback =
      _CopyDataOfUnrestrictedAlignmentStructWithCallbackPtr.asFunction<
          int Function(
              HANDLE, UnrestrictedAlignmentStruct, CopyStructCallbackFunc)>();

  int CopyDataOfRestrictedAlignmentStructWithCallback(
    HANDLE pClassHandle,
    RestrictedAlignmentStruct pStruct,
    CopyStructCallbackFunc pCopyCallbackFunc,
  ) {
    return _CopyDataOfRestrictedAlignmentStructWithCallback(
      pClassHandle,
      pStruct,
      pCopyCallbackFunc,
    );
  }

  late final _CopyDataOfRestrictedAlignmentStructWithCallbackPtr = _lookup<
          ffi.NativeFunction<
              BOOL Function(
                  HANDLE, RestrictedAlignmentStruct, CopyStructCallbackFunc)>>(
      'CopyDataOfRestrictedAlignmentStructWithCallback');
  late final _CopyDataOfRestrictedAlignmentStructWithCallback =
      _CopyDataOfRestrictedAlignmentStructWithCallbackPtr.asFunction<
          int Function(
              HANDLE, RestrictedAlignmentStruct, CopyStructCallbackFunc)>();
}

class FFIUnrestrictedAlignmentStruct extends ffi.Struct {
  @ffi.Int32()
  external int intField;

  @ffi.Int16()
  external int charField;

  external CallbackFunc funcptrField;

  @ffi.Float()
  external double floatField;

  @ffi.Array.multi([15])
  external ffi.Array<ffi.Int16> stringField;

  @ffi.Array.multi([10])
  external ffi.Array<ffi.Double> dubaryField;
}

typedef CallbackFunc = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Double>)>>;

@ffi.Packed(1)
class FFIRestrictedAlignmentStruct extends ffi.Struct {
  @ffi.Int32()
  external int intField;

  @ffi.Int16()
  external int charField;

  external CallbackFunc funcptrField;

  @ffi.Float()
  external double floatField;

  @ffi.Array.multi([15])
  external ffi.Array<ffi.Int16> stringField;

  @ffi.Array.multi([10])
  external ffi.Array<ffi.Double> dubaryField;
}

class FFIExcludeUnrestrictedAlignmentStruct2 extends ffi.Struct {
  @ffi.Int32()
  external int intField;

  @uchar()
  external int charField;

  external ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Double>)>>
      funcptrField;

  @ffi.Float()
  external double floatField;

  @ffi.Array.multi([15])
  external ffi.Array<ffi.Int16> stringField;

  @ffi.Array.multi([10])
  external ffi.Array<ffi.Double> dubaryField;
}

typedef uchar = ffi.Uint8;
typedef BOOL = ffi.Int32;
typedef HANDLE = ffi.Pointer<ffi.Void>;
typedef RestrictedAlignmentStruct = FFIRestrictedAlignmentStruct;
typedef UnrestrictedAlignmentStruct = FFIUnrestrictedAlignmentStruct;
typedef pRestrictedAlignmentStruct = ffi.Pointer<FFIRestrictedAlignmentStruct>;
typedef pUnrestrictedAlignmentStruct
    = ffi.Pointer<FFIUnrestrictedAlignmentStruct>;
typedef CopyStructCallbackFunc
    = ffi.Pointer<ffi.NativeFunction<BOOL Function(PVOID)>>;
typedef PVOID = ffi.Pointer<ffi.Void>;
